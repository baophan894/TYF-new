datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id              String          @id @default(uuid())
  clerkId         String          @unique
  firstName       String
  lastName        String
  username        String
  email           String
  profileImage    String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  reviews         Review[]
  bookings        Booking[]       @relation("ProfileToBookings")
  babySitting     Booking[]       @relation("ProfileToBabySitting")
  CV              CV?
  busyDays        BusyDay[]
  isBabySitter    Boolean         @default(false)

  detailProfile   DetailProfile?  @relation(fields: [detailProfileId], references: [id], name: "ProfileToDetailProfile")
  detailProfileId String?         @unique // Đánh dấu trường này là duy nhất
}

model DetailProfile {
  id          String  @id @default(uuid())
  citizenId   String
  homeTown    String
  gender      String
  dateofBirth String
  residence   String
  nationality String
  profile     Profile? @relation(name: "ProfileToDetailProfile")
}

model BusyDay {
  id        String   @id @default(uuid())
  dateBusy  DateTime
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId String
}

model CV {
  id          String   @id @default(uuid())
  name        String
  phone       String
  cv          String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId   String   @unique
}

model Review {
  id         String   @id @default(uuid())
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId  String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Booking {
  id             String   @id @default(uuid())
  profile        Profile  @relation("ProfileToBookings", fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId      String
  paymentStatus  Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  location       String
  babySitter     Profile? @relation("ProfileToBabySitting", fields: [babySitterId], references: [id]) 
  babySitterId   String?
  amount         String
  startDateTime  DateTime? // Thời gian bắt đầu
  endDateTime    DateTime? // Thời gian kết thúc
  type           BookingType // Phân loại loại hình booking: "Hourly", "Daily", "Monthly"
}

enum BookingType {
  HOURLY
  DAILY
  MONTHLY
}
